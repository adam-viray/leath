#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Determines fractal dimension of Leath
24 Jan 2021
"""

import numpy as np
from leath import Leath
import matplotlib.pyplot as plt
from scipy.ndimage import center_of_mass
from scipy.stats import linregress
plt.style.use("fivethirtyeight")

repeat = 20
bins = np.zeros(10)
radii = np.zeros(10)

"""
generate a leath cluster. if the cluster spans,
gather M(r) and store them.
"""
L = Leath(300,.5927)
radius = L.N
radii = [.1*radius, .2*radius, .3*radius, .4*radius, .5*radius,\
         .6*radius, .7*radius, .8*radius, .9*radius, radius]
    
i = 0
while i < repeat:
    print(i)
    L.reset()
    while np.any(np.fromiter(L.perimeter.values(),dtype=np.int8)):
        print(np.any(np.fromiter(L.perimeter.values(),dtype=np.int8)))
        L.iterate()
        print(np.sum(L.output_array))
    print(np.any(np.fromiter(L.perimeter.values(),dtype=np.int8)))
    if L.does_span():
        for n in range(0,10):
            bins[n] += L.mass(radii[n],center_of_mass(L.output_array))
        i += 1
        
bins = np.array(bins,dtype=np.float32)
bins = bins/repeat
fit = linregress(np.log10(radii),np.log10(bins))
print("Fractal Dimension: %4.3f"%fit.slope)
x_fit = np.log10(np.linspace(radii[0],radii[-1],100))
y_fit = fit.slope*x_fit+fit.intercept
fig = plt.figure()
im = plt.plot(np.log10(radii),np.log10(bins),'ko',x_fit,y_fit,'r-')
plt.show()
